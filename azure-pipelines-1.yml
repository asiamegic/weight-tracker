# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'c4517051-90b6-48eb-8838-bbad4c62bd9d'
  imageRepository: 'artemimage'
  containerRegistry: 'artemrafikov.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

# stages:
# - stage: Build
#   displayName: CI Build and push stage docker image
#   jobs:
#   - job: Build
#     displayName: Build
#     pool:
#       name: my-pool
#     steps:
#     - task: Docker@2
#       displayName: Build and push an image to container registry
#       inputs:
#         command: buildAndPush
#         repository: $(imageRepository)
#         dockerfile: $(dockerfilePath)
#         containerRegistry: $(dockerRegistryServiceConnection)
#         tags: |
#           $(tag)

#CD_staging
- stage: CD_staging
  displayName: CD staging pull docker image from ACR
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: my-pool

    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Azure Pass - Sponsorship(ee9699ca-a8f8-4329-94ef-50c93be9524e)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az --version
          az account show
    
    - task: CmdLine@2
      displayName: Stop Current Container
      inputs:
        script: 'docker rm -f  weighttracker || true'
      
    - task: Docker@2
      displayName: 'Login to Registry'
      inputs:
              containerRegistry: $(dockerRegistryServiceConnection)
              command: 'login'
    - task: CmdLine@2
      inputs:
        script: 'docker pull $(containerRegistry)/$(imageRepository):$(tag)'
    
    - task: Bash@3
      displayName:  Run Container
      inputs:
        targetType: 'inline'
        script: 'docker run -d --restart=always --name weighttracker -p 8080:8080 -e PGHOST=$(PG_HOST) -e PORT=$(PORT) -e HOST=$(HOST) -e PGUSERNAME=$(PG_USERNAME) -e PGDATABASE=postgres -e PGPASSWORD=$(PG_PASSWORD) -e PGPORT=$(PG_PORT) -e HOST_URL=$(HOST_URL) -e COOKIE_ENCRYPT_PWD=$(COOKIE_ENCRYPT_PWD) -e NODE_ENV=development -e OKTA_ORG_URL=$(OKTA_ORG_URL) -e OKTA_CLIENT_ID=$(OKTA_CLIENT_ID) -e OKTA_CLIENT_SECRET=$(OKTA_CLIENT_SECRET) $(containerRegistry)/$(imageRepository):$(tag)'

